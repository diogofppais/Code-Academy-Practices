# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

#1 Exercise, creating a fuction converting damages numbers to floats, keeping the missing data as it is

def convert_damages(damages):
    updated_damages = []
    for damage in damages:
        if damage == 'Damages not recorded':
            updated_damages.append(damage)
        else:
            # Extract the numeric part of the damage string
            numeric_part = damage[:-1]
            # Check if it represents billions or millions
            if damage[-1] == 'B':
                updated_damages.append(float(numeric_part) * 1e9)
            elif damage[-1] == 'M':
                updated_damages.append(float(numeric_part) * 1e6)
    return updated_damages

updated_damages = convert_damages(damages)
print(updated_damages)

#2 Create a Dictionary with all the lists when the name is the key:

def construct_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    hurricane_data = {}
    for i in range(len(names)):
        hurricane = {
            'Name': names[i],
            'Month': months[i],
            'Year': years[i],
            'Max Sustained Wind': max_sustained_winds[i],
            'Areas Affected': areas_affected[i],
            'Damage': damages[i],
            'Deaths': deaths[i]
        }
        hurricane_data[names[i]] = hurricane
    return hurricane_data

hurricane_data = construct_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths)

#3 Organize hurricanes by year instead of name

def organize_hurricanes_by_year(hurricane_data):
    hurricanes_by_year = {}
    for hurricane in hurricane_data.values():
        year = hurricane['Year']
        if year in hurricanes_by_year:
            hurricanes_by_year[year].append(hurricane)
        else:
            hurricanes_by_year[year] = [hurricane]
    return hurricanes_by_year

# Call the function and store the result in a variable
hurricanes_by_year = organize_hurricanes_by_year(hurricane_data)

# Print the hurricanes for a specific year
print(hurricanes_by_year[1932])

#4 Count affected areas

def count_affected_areas(hurricane_data):
    area_counts = {}
    for hurricane in hurricane_data.values():
        areas_affected = hurricane['Areas Affected']
        for area in areas_affected:
            if area in area_counts:
                area_counts[area] += 1
            else:
                area_counts[area] = 1
    return area_counts

# Call the function and store the result in a variable
affected_area_counts = count_affected_areas(hurricane_data)

# Print the affected area counts
print(affected_area_counts)

#5 Find most affected area

def find_most_affected_area(affected_area_counts):
    max_count = 0
    most_affected_area = None
    for area, count in affected_area_counts.items():
        if count > max_count:
            max_count = count
            most_affected_area = area
    return most_affected_area, max_count

# Call the function and store the result in variables
most_affected_area, hit_count = find_most_affected_area(affected_area_counts)

# Print the most affected area and hit count
print("Most affected area:", most_affected_area)
print("Hit count:", hit_count)

#6 Finding the deadliest hurricane

def find_deadliest_hurricane(hurricane_data):
    max_deaths = 0
    deadliest_hurricane = None
    for hurricane in hurricane_data.values():
        deaths = hurricane['Deaths']
        if deaths > max_deaths:
            max_deaths = deaths
            deadliest_hurricane = hurricane['Name']
    return deadliest_hurricane, max_deaths

# Call the function and store the result in variables
deadliest_hurricane, death_count = find_deadliest_hurricane(hurricane_data)

# Print the deadliest hurricane and death count
print("Deadliest hurricane:", deadliest_hurricane)
print("Death count:", death_count)

#7 Hurricane by mortality

def rate_hurricanes_by_mortality(hurricane_data):
    mortality_scale = {
        0: 0,
        1: 100,
        2: 500,
        3: 1000,
        4: 10000
    }
    hurricanes_by_mortality = {rating: [] for rating in mortality_scale}
    
    for hurricane in hurricane_data.values():
        deaths = hurricane['Deaths']
        for rating, upper_bound in mortality_scale.items():
            if deaths > upper_bound:
                continue
            hurricanes_by_mortality[rating].append(hurricane)
            break
    
    return hurricanes_by_mortality


# Call the function and store the result in a variable
hurricanes_by_mortality = rate_hurricanes_by_mortality(hurricane_data)

# Print the hurricanes for each mortality rating
for rating, hurricanes in hurricanes_by_mortality.items():
    print("Mortality Rating:", rating)
    for hurricane in hurricanes:
        print(hurricane)
    print()

#8 Highest damage Hurricane

def find_most_costly_hurricane(hurricane_data):
    max_damage = 0
    most_costly_hurricane = None
    for hurricane in hurricane_data.values():
        damage = hurricane['Damage']
        if damage != 'Damages not recorded':
            damage = float(damage[:-1])  # Remove the last character 'M' or 'B'
            if damage > max_damage:
                max_damage = damage
                most_costly_hurricane = hurricane['Name']
    return most_costly_hurricane, max_damage

# Call the function and store the result in variables
costliest_hurricane, damage_cost = find_most_costly_hurricane(hurricane_data)

# Print the costliest hurricane and damage cost
print("Costliest hurricane:", costliest_hurricane)
print("Damage cost:", damage_cost)

#9 Hurricanes by Damage Scale

def rate_hurricanes_by_damage(hurricane_data):
    damage_scale = {
        0: 0,
        1: 100000000,
        2: 1000000000,
        3: 10000000000,
        4: 50000000000
    }
    hurricanes_by_damage = {rating: [] for rating in damage_scale}
    
    for hurricane in hurricane_data.values():
        damage = hurricane['Damage']
        if damage != 'Damages not recorded':
            damage = float(damage[:-1])  # Remove the last character 'M' or 'B'
            for rating, upper_bound in damage_scale.items():
                if damage > upper_bound:
                    continue
                hurricanes_by_damage[rating].append(hurricane)
                break
    
    return hurricanes_by_damage

# Call the function and store the result in a variable
hurricanes_by_damage = rate_hurricanes_by_damage(hurricane_data)

# Print the hurricanes for each damage rating
for rating, hurricanes in hurricanes_by_damage.items():
    print("Damage Rating:", rating)
    for hurricane in hurricanes:
        print(hurricane)
    print()
